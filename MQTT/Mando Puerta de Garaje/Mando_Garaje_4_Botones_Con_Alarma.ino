//// https://www.youtube.com/@ArduBrico ////

#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <ESP8266WiFi.h>
#include <PubSubClient.h>
#include <ArduinoOTA.h>

#define SCREEN_WIDTH 128  // Definimos el ancho de nuetra pantalla OLED
#define SCREEN_HEIGHT 64  // Definimos el alto de nuestra pantalla OLED

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1);  // Configuramos los parametros para la pantalla

const char* ssid = "SSID";                 // Configuramos nuestra red Wifi
const char* password = "Password SSID";    // Configuramos la contraseña de nuestra red Wifi
const char* mqtt_server = "xxxxxxxx";      // Configuramos nuestra I.P. EXTERNA de nuestro servidor Home Assistant,por ejemplo, duckdns, etc
int mqttport = 1883;                       // Puerto para MQTT
const char* mqttusuario = "MQTT";          // Configuramos nuestro usuario MQTT
const char* mqttpass = "PASS_MQTT";        // Configuramos contraseña para el usuario MQTT
#define CLIENT_ID "Mando"                  // Configuramos el nombre que le queremos dar al dispositivo
#define Topic_Mando "mando/estado"         // Configuramos el topic para el sensor del mando
#define Topic_Puerta "garaje/puertanueva"  // Configuramos el topic para abrir y cerrar la puerta
#define Topic_Alarma "alarmo"              // Configuramos el topic para controlar la alarma (con alarmo)

WiFiClient espClient;
PubSubClient client(espClient);

const int botonAbrir = 2;                 // Conectamos el pulsador de abrir a D4
const int botonCerrar = 14;               // Conectamos el pulsador de cerrar a D5
const int botonAlarma = 12;               // Conectamos el pulsador de alarma modo "Armada ausente" a D6
const int botonAlarma2 = 13;              // Conectamos el pulsador de alarma modo "Armada en casa" a D7
const char* estadoGaraje = "Sin estado";  // Creamos una variable para leer el estado de la puerta
int valAbrir = 0;                         // Variable para guardar el estado del pulsador "abrir"
int old_valAbrir = 1;                     // Variable para guardar el estado anteior del pulsador "abrir"
int valCerrar = 0;                        // Variable para guardar el estado del pulsador "cerrar"
int old_valCerrar = 1;                    // Variable para guardar el estado anteior del pulsador "cerrar"
int valAlarma = 0;                        // Variable para guardar el estado del pulsador de alarma modo "Armada ausente"
int old_valAlarma = 1;                    // Variable para guardar el estado anteior del pulsador de alarma modo "Armada ausente"
int valAlarma2 = 0;                       // Variable para guardar el estado del pulsador de alarma modo "Armada en casa"
int old_valAlarma2 = 1;                   // Variable para guardar el estado anteior del pulsador de alarma modo "Armada en casa"
int estado_bajando = 0;                   // Variable para indicar cuando mostrar la animación de bajar
int estado_subiendo = 0;                  // Variable para indicar cuando mostrar la animación de subir
int estado_armando = 0;                   // Variable para indicar cuando mostrar la animación de "armando alarma"
int s = 0;                                // Variable que usaremos para mostrar las imagenes de la animación de subir
int b = 4;                                // Variable que usaremos para mostrar las imagenes de la animación de bajar
int a = 0;                                // Variable que usaremos para mostrar las imagenes de la animación de "armando alarma"
unsigned long tiempoBotonAbrirOn;         // Lo utilizaremos para contar el tiempo que está pulsado el botón de abrir, para evitar el "efecto rebote"
unsigned long tiempoBotonCerrarOn;        // Lo utilizaremos para contar el tiempo que está pulsado el botón de alarma modo "Armada ausente", para evitar el "efecto rebote"
unsigned long tiempoBotonAlarmaOn;        // Lo utilizaremos para contar el tiempo que está pulsado el botón de alarma modo "Armada en casa", para evitar el "efecto rebote"
unsigned long tiempoBotonAlarma2On;       // Lo utilizaremos para contar el tiempo que está pulsado el botón de cerrar, para evitar el "efecto rebote"
unsigned long tiempoBotonAbrirOff;        // Lo utilizaremos para contar el tiempo que está sin ser pulsado el botón de abrir, para evitar el "efecto rebote"
unsigned long tiempoBotonCerrarOff;       // Lo utilizaremos para contar el tiempo que está sin ser pulsado el botón de cerrar, para evitar el "efecto rebote"
unsigned long tiempoBotonAlarmaOff;       // Lo utilizaremos para contar el tiempo que está sin ser pulsado el botón de alarma modo "Armada ausente", para evitar el "efecto rebote"
unsigned long tiempoBotonAlarma2Off;      // Lo utilizaremos para contar el tiempo que está sin ser pulsado el botón de alarma modo "Armada en casa", para evitar el "efecto rebote"
unsigned long tiempoImagenes;             // Lo utilizaremos para controlar el tiempo que pasa entre una imagen y otra de las animaciones de la puerta
unsigned long tiempoImagenes_armando;     // Lo utilizaremos para controlar el tiempo que pasa entre una imagen y otra de las animaciones de "armando alarma"
bool flancoBotonAbrirOn = false;          // Variable para saber si ha pasado el tiempo necesario para evitar el "efecto rebote"
bool flancoBotonCerrarOn = false;         // Variable para saber si ha pasado el tiempo necesario para evitar el "efecto rebote"
bool flancoBotonAlarmaOn = false;         // Variable para saber si ha pasado el tiempo necesario para evitar el "efecto rebote"
bool flancoBotonAlarma2On = false;        // Variable para saber si ha pasado el tiempo necesario para evitar el "efecto rebote"
bool flancoBotonAbrirOff = false;         // Variable para saber si ha pasado el tiempo necesario para evitar el "efecto rebote"
bool flancoBotonCerrarOff = false;        // Variable para saber si ha pasado el tiempo necesario para evitar el "efecto rebote"
bool flancoBotonAlarmaOff = false;        // Variable para saber si ha pasado el tiempo necesario para evitar el "efecto rebote"
bool flancoBotonAlarma2Off = false;       // Variable para saber si ha pasado el tiempo necesario para evitar el "efecto rebote"
unsigned long tiempomax = 150;            // Configuramos el tiempo en milisegundos necesarios para evitar el "efecto rebote"
unsigned long tiempomaxImagenes = 400;    // Configuramos el tiempo que queremos que pase entre las imagenes de la animación tanto de a puerta como de "armando alarma"

// A continuación configuramos las imagenes que vamos a mostrar en la pantalla

// Imagen del logo
static const unsigned char PROGMEM logo[] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x7f, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0xff, 0xe0, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00,
  0x00, 0xc1, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x80, 0x38, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x81, 0x80, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x80, 0x0c, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x80, 0x80, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x80, 0x06, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x80, 0x80, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x87, 0x82, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0xc0, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x86, 0xc2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x08, 0x43, 0xce, 0x1f, 0xfc, 0x78, 0x7c, 0x84, 0xc2, 0x7b, 0xdf, 0x03, 0xf8, 0x3f, 0x80,
  0x03, 0x18, 0x43, 0xfe, 0x3f, 0xfc, 0x78, 0x7c, 0x87, 0x86, 0x7f, 0xdf, 0x0f, 0xf8, 0xff, 0xc0,
  0x02, 0x18, 0x63, 0xfe, 0x7f, 0xfc, 0x78, 0x7c, 0x80, 0x04, 0x7f, 0xdf, 0x1f, 0xf9, 0xff, 0xe0,
  0x02, 0x1c, 0x23, 0xfe, 0x7e, 0xfc, 0x78, 0x7c, 0x80, 0x1c, 0x7f, 0xdf, 0x1f, 0x93, 0xf3, 0xe0,
  0x06, 0x3c, 0x23, 0xf0, 0xf8, 0x7c, 0x78, 0x7c, 0x80, 0x04, 0x7e, 0x1f, 0x3e, 0x03, 0xe1, 0xf0,
  0x04, 0x1c, 0x23, 0xe0, 0xf8, 0x7c, 0x78, 0x7c, 0x80, 0x02, 0x7c, 0x1f, 0x3e, 0x03, 0xe1, 0xf0,
  0x04, 0x00, 0x33, 0xe0, 0xf8, 0x7c, 0x78, 0x7c, 0x87, 0xc2, 0x7c, 0x1f, 0x3e, 0x03, 0xe1, 0xf0,
  0x04, 0x00, 0x13, 0xe0, 0xf8, 0x7c, 0x78, 0x7c, 0x84, 0x43, 0x7c, 0x1f, 0x3e, 0x03, 0xe1, 0xf0,
  0x0c, 0x00, 0x13, 0xe0, 0xf8, 0x7c, 0x7c, 0x7c, 0x84, 0x43, 0x7c, 0x1f, 0x3e, 0x03, 0xe1, 0xf0,
  0x08, 0x7e, 0x1b, 0xe0, 0xf8, 0x7c, 0x7c, 0x7c, 0x87, 0xc3, 0x7c, 0x1f, 0x3f, 0x03, 0xe1, 0xf0,
  0x08, 0x62, 0x0b, 0xe0, 0x7f, 0xfc, 0x7f, 0xfc, 0x83, 0x02, 0x7c, 0x1f, 0x1f, 0xfb, 0xff, 0xe0,
  0x18, 0x43, 0x0b, 0xe0, 0x7f, 0xfc, 0x7f, 0xfc, 0x80, 0x06, 0x7c, 0x1f, 0x1f, 0xf9, 0xff, 0xe0,
  0x10, 0x43, 0x0f, 0xe0, 0x3f, 0xfc, 0x3f, 0xfc, 0x80, 0x0c, 0x7c, 0x1f, 0x0f, 0xf8, 0xff, 0xc0,
  0x18, 0xc1, 0x0f, 0xe0, 0x1f, 0x3c, 0x1f, 0x3c, 0x80, 0x78, 0x78, 0x1f, 0x03, 0xf8, 0x3f, 0x00,
  0x1f, 0x80, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// A continuación las imagenes utilizadas para la animación de la puerta
const unsigned char Puerta1[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x80,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x03, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x1f, 0x0e, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x7f, 0xc3, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc1,
  0xfb, 0xf0, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x07, 0xec, 0xfc, 0x38, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x0c, 0x1f, 0xbb, 0x3f, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x7e, 0xe0, 0xcf,
  0xc3, 0x80, 0x00, 0x00, 0x00, 0x00, 0xc1, 0xfb, 0x80, 0x33, 0xf0, 0x60, 0x00, 0x00, 0x00, 0x03,
  0x07, 0xee, 0x00, 0x0c, 0xfc, 0x18, 0x00, 0x00, 0x00, 0x0c, 0x1f, 0xbf, 0xff, 0xff, 0x3f, 0x06,
  0x00, 0x00, 0x00, 0x30, 0x7e, 0x02, 0x00, 0x00, 0x0f, 0xc1, 0x80, 0x00, 0x00, 0xc1, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xf0, 0x60, 0x00, 0x07, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x18, 0x00,
  0x1c, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x06, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x01, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xc0, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x3f, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80,
  0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x01, 0x80, 0x20, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x81, 0x80, 0x20, 0x7f,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc1, 0x80, 0x20, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0x41, 0x80, 0x20, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x41, 0x80, 0x20, 0x50, 0x3e, 0x00,
  0x1f, 0x00, 0x1f, 0x01, 0x41, 0x80, 0x20, 0x50, 0xff, 0x80, 0x7f, 0xc0, 0x7f, 0xc1, 0x41, 0x80,
  0x20, 0x51, 0xc1, 0xc0, 0xc0, 0xe0, 0xe0, 0x61, 0x41, 0x80, 0x20, 0x53, 0x00, 0x61, 0x80, 0x31,
  0x80, 0x31, 0x41, 0x80, 0x20, 0x53, 0x00, 0x61, 0x00, 0x31, 0x80, 0x11, 0x41, 0x80, 0x20, 0x56,
  0x00, 0x33, 0x00, 0x11, 0x00, 0x19, 0x41, 0x80, 0x20, 0x57, 0xff, 0xf3, 0xff, 0xfb, 0xff, 0xf9,
  0x41, 0x80, 0x20, 0x53, 0xff, 0xe3, 0xff, 0xf1, 0xff, 0xf9, 0x41, 0x80, 0x20, 0x5f, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xfd, 0x41, 0x80, 0x20, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x41, 0x80,
  0x20, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x41, 0x80, 0x20, 0x50, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x01, 0x41, 0x80, 0x20, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x41, 0x80, 0x20, 0x50,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x41, 0x80, 0x20, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
  0x41, 0x80, 0x20, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x41, 0x80, 0x20, 0x5f, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0x41, 0x80, 0x20, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x41, 0x80,
  0x20, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x41, 0x80, 0x20, 0x50, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x01, 0x41, 0x80, 0x20, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x41, 0x80, 0x20, 0x50,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x41, 0x80, 0x20, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
  0x41, 0x80, 0x20, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x41, 0x80, 0x20, 0x5f, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0x41, 0x80, 0x20, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x41, 0x80,
  0x20, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x41, 0x80, 0x20, 0x50, 0x00, 0x00, 0x7f, 0xc0,
  0x00, 0x01, 0x41, 0x80, 0x20, 0x50, 0x00, 0x00, 0x7f, 0xc0, 0x00, 0x01, 0x41, 0x80, 0x20, 0x50,
  0x00, 0x00, 0x40, 0x40, 0x00, 0x01, 0x41, 0x80, 0x20, 0x50, 0x00, 0x00, 0x7f, 0xc0, 0x00, 0x01,
  0x41, 0x80, 0x20, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x41, 0x80, 0x10, 0x5f, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0x41, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00
};

const unsigned char Puerta2[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x80,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x03, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x1f, 0x0e, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x7f, 0xc3, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc1,
  0xfb, 0xf0, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x07, 0xec, 0xfc, 0x38, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x0c, 0x1f, 0xbb, 0x3f, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x7e, 0xe0, 0xcf,
  0xc3, 0x80, 0x00, 0x00, 0x00, 0x00, 0xc1, 0xfb, 0x80, 0x33, 0xf0, 0x60, 0x00, 0x00, 0x00, 0x03,
  0x07, 0xee, 0x00, 0x0c, 0xfc, 0x18, 0x00, 0x00, 0x00, 0x0c, 0x1f, 0xbf, 0xff, 0xff, 0x3f, 0x06,
  0x00, 0x00, 0x00, 0x30, 0x7e, 0x02, 0x00, 0x00, 0x0f, 0xc1, 0x80, 0x00, 0x00, 0xc1, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xf0, 0x60, 0x00, 0x07, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x18, 0x00,
  0x1c, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x06, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x01, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xc0, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x3f, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80,
  0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x01, 0x80, 0x20, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x81, 0x80, 0x20, 0x7f,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc1, 0x80, 0x20, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0x41, 0x80, 0x20, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x41, 0x80, 0x20, 0x50, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x01, 0x41, 0x80, 0x20, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x41, 0x80,
  0x20, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x41, 0x80, 0x20, 0x50, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x01, 0x41, 0x80, 0x20, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x41, 0x80, 0x20, 0x50,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x41, 0x80, 0x20, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
  0x41, 0x80, 0x20, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x41, 0x80, 0x20, 0x5f, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xfd, 0x41, 0x80, 0x20, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x41, 0x80,
  0x20, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x41, 0x80, 0x20, 0x50, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x01, 0x41, 0x80, 0x20, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x41, 0x80, 0x20, 0x50,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x41, 0x80, 0x20, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
  0x41, 0x80, 0x20, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x41, 0x80, 0x20, 0x5f, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0x41, 0x80, 0x20, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x41, 0x80,
  0x20, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x41, 0x80, 0x20, 0x50, 0x00, 0x00, 0x7f, 0xc0,
  0x00, 0x01, 0x41, 0x80, 0x20, 0x50, 0x00, 0x00, 0x40, 0x40, 0x00, 0x01, 0x41, 0x80, 0x20, 0x50,
  0x00, 0x00, 0x40, 0x40, 0x00, 0x01, 0x41, 0x80, 0x20, 0x50, 0x00, 0x00, 0x7f, 0xc0, 0x00, 0x01,
  0x41, 0x80, 0x20, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x41, 0x80, 0x20, 0x5f, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0x41, 0x80, 0x20, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x41, 0x80,
  0x20, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x41, 0x80, 0x20, 0x50, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x01, 0x41, 0x80, 0x20, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x41, 0x80, 0x20, 0x50,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x41, 0x80, 0x20, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
  0x41, 0x80, 0x20, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x41, 0x80, 0x10, 0x50, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x01, 0x41, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00
};

const unsigned char Puerta3[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x80,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x03, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x1f, 0x0e, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x7f, 0xc3, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc1,
  0xfb, 0xf0, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x07, 0xec, 0xfc, 0x38, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x0c, 0x1f, 0xbb, 0x3f, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x7e, 0xe0, 0xcf,
  0xc3, 0x80, 0x00, 0x00, 0x00, 0x00, 0xc1, 0xfb, 0x80, 0x33, 0xf0, 0x60, 0x00, 0x00, 0x00, 0x03,
  0x07, 0xee, 0x00, 0x0c, 0xfc, 0x18, 0x00, 0x00, 0x00, 0x0c, 0x1f, 0xbf, 0xff, 0xff, 0x3f, 0x06,
  0x00, 0x00, 0x00, 0x30, 0x7e, 0x02, 0x00, 0x00, 0x0f, 0xc1, 0x80, 0x00, 0x00, 0xc1, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xf0, 0x60, 0x00, 0x07, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x18, 0x00,
  0x1c, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x06, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x01, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xc0, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x3f, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80,
  0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x01, 0x80, 0x20, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x81, 0x80, 0x20, 0x7f,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc1, 0x80, 0x20, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0x41, 0x80, 0x20, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x41, 0x80, 0x20, 0x50, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x01, 0x41, 0x80, 0x20, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x41, 0x80,
  0x20, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x41, 0x80, 0x20, 0x50, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x01, 0x41, 0x80, 0x20, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x41, 0x80, 0x20, 0x50,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x41, 0x80, 0x20, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
  0x41, 0x80, 0x20, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x41, 0x80, 0x20, 0x5f, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xfd, 0x41, 0x80, 0x20, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x41, 0x80,
  0x20, 0x50, 0x00, 0x00, 0x7f, 0xc0, 0x00, 0x01, 0x41, 0x80, 0x20, 0x50, 0x00, 0x00, 0x7f, 0xc0,
  0x00, 0x01, 0x41, 0x80, 0x20, 0x50, 0x00, 0x00, 0x40, 0x40, 0x00, 0x01, 0x41, 0x80, 0x20, 0x50,
  0x00, 0x00, 0x40, 0x40, 0x00, 0x01, 0x41, 0x80, 0x20, 0x50, 0x00, 0x00, 0x7f, 0xc0, 0x00, 0x01,
  0x41, 0x80, 0x20, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x41, 0x80, 0x20, 0x5f, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0x41, 0x80, 0x20, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x41, 0x80,
  0x20, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x41, 0x80, 0x20, 0x50, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x01, 0x41, 0x80, 0x20, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x41, 0x80, 0x20, 0x50,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x41, 0x80, 0x20, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
  0x41, 0x80, 0x20, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x41, 0x80, 0x20, 0x50, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x01, 0x41, 0x80, 0x20, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x41, 0x80,
  0x20, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x41, 0x80, 0x20, 0x50, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x01, 0x41, 0x80, 0x20, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x41, 0x80, 0x20, 0x50,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x41, 0x80, 0x20, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
  0x41, 0x80, 0x20, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x41, 0x80, 0x10, 0x50, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x01, 0x41, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00
};

const unsigned char Puerta4[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x80,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x03, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x1f, 0x0e, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x7f, 0xc3, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc1,
  0xfb, 0xf0, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x07, 0xec, 0xfc, 0x38, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x0c, 0x1f, 0xbb, 0x3f, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x7e, 0xe0, 0xcf,
  0xc3, 0x80, 0x00, 0x00, 0x00, 0x00, 0xc1, 0xfb, 0x80, 0x33, 0xf0, 0x60, 0x00, 0x00, 0x00, 0x03,
  0x07, 0xee, 0x00, 0x0c, 0xfc, 0x18, 0x00, 0x00, 0x00, 0x0c, 0x1f, 0xbf, 0xff, 0xff, 0x3f, 0x06,
  0x00, 0x00, 0x00, 0x30, 0x7e, 0x02, 0x00, 0x00, 0x0f, 0xc1, 0x80, 0x00, 0x00, 0xc1, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xf0, 0x60, 0x00, 0x07, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x18, 0x00,
  0x1c, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x06, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x01, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xc0, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x3f, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80,
  0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x01, 0x80, 0x20, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x81, 0x80, 0x20, 0x7f,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc1, 0x80, 0x20, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0x41, 0x80, 0x20, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x41, 0x80, 0x20, 0x50, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x01, 0x41, 0x80, 0x20, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x41, 0x80,
  0x20, 0x50, 0x00, 0x00, 0x7f, 0xc0, 0x00, 0x01, 0x41, 0x80, 0x20, 0x50, 0x00, 0x00, 0x7f, 0xc0,
  0x00, 0x01, 0x41, 0x80, 0x20, 0x50, 0x00, 0x00, 0x40, 0x40, 0x00, 0x01, 0x41, 0x80, 0x20, 0x50,
  0x00, 0x00, 0x7f, 0xc0, 0x00, 0x01, 0x41, 0x80, 0x20, 0x50, 0x00, 0x00, 0x7f, 0x80, 0x00, 0x01,
  0x41, 0x80, 0x20, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x41, 0x80, 0x20, 0x5f, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xfd, 0x41, 0x80, 0x20, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x41, 0x80,
  0x20, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x41, 0x80, 0x20, 0x50, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x01, 0x41, 0x80, 0x20, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x41, 0x80, 0x20, 0x50,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x41, 0x80, 0x20, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
  0x41, 0x80, 0x20, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x41, 0x80, 0x20, 0x50, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x01, 0x41, 0x80, 0x20, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x41, 0x80,
  0x20, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x41, 0x80, 0x20, 0x50, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x01, 0x41, 0x80, 0x20, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x41, 0x80, 0x20, 0x50,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x41, 0x80, 0x20, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
  0x41, 0x80, 0x20, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x41, 0x80, 0x20, 0x50, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x01, 0x41, 0x80, 0x20, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x41, 0x80,
  0x20, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x41, 0x80, 0x20, 0x50, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x01, 0x41, 0x80, 0x20, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x41, 0x80, 0x20, 0x50,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x41, 0x80, 0x20, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
  0x41, 0x80, 0x20, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x41, 0x80, 0x10, 0x50, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x01, 0x41, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00
};

const unsigned char Puerta5[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x80,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x03, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x1f, 0x0e, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x7f, 0xc3, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc1,
  0xfb, 0xf0, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x07, 0xec, 0xfc, 0x38, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x0c, 0x1f, 0xbb, 0x3f, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x7e, 0xe0, 0xcf,
  0xc3, 0x80, 0x00, 0x00, 0x00, 0x00, 0xc1, 0xfb, 0x80, 0x33, 0xf0, 0x60, 0x00, 0x00, 0x00, 0x03,
  0x07, 0xee, 0x00, 0x0c, 0xfc, 0x18, 0x00, 0x00, 0x00, 0x0c, 0x1f, 0xbf, 0xff, 0xff, 0x3f, 0x06,
  0x00, 0x00, 0x00, 0x30, 0x7e, 0x02, 0x00, 0x00, 0x0f, 0xc1, 0x80, 0x00, 0x00, 0xc1, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xf0, 0x60, 0x00, 0x07, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x18, 0x00,
  0x1c, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x06, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x01, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xc0, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x3f, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80,
  0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x01, 0x80, 0x20, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x81, 0x80, 0x20, 0x7f,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc1, 0x80, 0x20, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0x41, 0x80, 0x20, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x41, 0x80, 0x20, 0x50, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x01, 0x41, 0x80, 0x20, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x41, 0x80,
  0x20, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x41, 0x80, 0x20, 0x50, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x01, 0x41, 0x80, 0x20, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x41, 0x80, 0x20, 0x50,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x41, 0x80, 0x20, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
  0x41, 0x80, 0x20, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x41, 0x80, 0x20, 0x50, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x01, 0x41, 0x80, 0x20, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x41, 0x80,
  0x20, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x41, 0x80, 0x20, 0x50, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x01, 0x41, 0x80, 0x20, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x41, 0x80, 0x20, 0x50,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x41, 0x80, 0x20, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
  0x41, 0x80, 0x20, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x41, 0x80, 0x20, 0x50, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x01, 0x41, 0x80, 0x20, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x41, 0x80,
  0x20, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x41, 0x80, 0x20, 0x50, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x01, 0x41, 0x80, 0x20, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x41, 0x80, 0x20, 0x50,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x41, 0x80, 0x20, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
  0x41, 0x80, 0x20, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x41, 0x80, 0x20, 0x50, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x01, 0x41, 0x80, 0x20, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x41, 0x80,
  0x20, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x41, 0x80, 0x20, 0x50, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x01, 0x41, 0x80, 0x20, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x41, 0x80, 0x20, 0x50,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x41, 0x80, 0x20, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
  0x41, 0x80, 0x20, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x41, 0x80, 0x10, 0x50, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x01, 0x41, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00
};
// Imagen para mostrar desconexión de Wifi
const unsigned char WifiOff[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x1f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x07, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x78, 0x00,
  0x00, 0x3f, 0xc0, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x3f, 0xe0, 0x00, 0x00, 0x00, 0xfc, 0x00,
  0x00, 0x7f, 0xf0, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x7e, 0x00,
  0x00, 0xfd, 0xfc, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0xfc, 0xfe, 0x00, 0x00, 0x10, 0x3f, 0x00,
  0x01, 0xf8, 0x7f, 0x00, 0x00, 0x38, 0x1f, 0x80, 0x01, 0xf8, 0x3f, 0x80, 0x00, 0x7c, 0x0f, 0x80,
  0x03, 0xf0, 0x3f, 0xc0, 0x00, 0xfc, 0x0f, 0x80, 0x03, 0xf0, 0x7f, 0xe0, 0x00, 0xfe, 0x0f, 0xc0,
  0x03, 0xe0, 0x7f, 0xf0, 0x00, 0x7e, 0x07, 0xc0, 0x03, 0xe0, 0x7f, 0xf8, 0x00, 0x3e, 0x07, 0xc0,
  0x03, 0xe0, 0xfd, 0xfc, 0x00, 0x3f, 0x07, 0xc0, 0x03, 0xe0, 0xfc, 0xfe, 0x00, 0x3f, 0x07, 0xc0,
  0x07, 0xe0, 0xfc, 0x7f, 0x00, 0x3f, 0x07, 0xe0, 0x07, 0xe0, 0xf8, 0x3f, 0x80, 0x1f, 0x07, 0xe0,
  0x07, 0xe0, 0xf8, 0x1f, 0xc0, 0x1f, 0x07, 0xe0, 0x07, 0xe0, 0xf8, 0x1f, 0xe0, 0x1f, 0x07, 0xe0,
  0x07, 0xe0, 0xfc, 0x1f, 0xf0, 0x1f, 0x07, 0xc0, 0x03, 0xe0, 0xfc, 0x0f, 0xf8, 0x0f, 0x07, 0xc0,
  0x03, 0xe0, 0x7c, 0x07, 0xfc, 0x06, 0x07, 0xc0, 0x03, 0xe0, 0x7e, 0x00, 0xfe, 0x02, 0x07, 0xc0,
  0x03, 0xf0, 0x7f, 0x00, 0x3f, 0x00, 0x0f, 0xc0, 0x03, 0xf0, 0x3f, 0x00, 0x1f, 0x80, 0x0f, 0xc0,
  0x01, 0xf0, 0x3e, 0x00, 0x0f, 0xc0, 0x0f, 0x80, 0x01, 0xf8, 0x1c, 0x00, 0x07, 0xe0, 0x1f, 0x80,
  0x01, 0xf8, 0x08, 0x00, 0x03, 0xf0, 0x1f, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x01, 0xf8, 0x0f, 0x00,
  0x00, 0xfe, 0x00, 0x00, 0x00, 0xfc, 0x06, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x7e, 0x02, 0x00,
  0x00, 0x3f, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x1f, 0x80, 0x00,
  0x00, 0x1e, 0x00, 0x00, 0x00, 0x0f, 0xc0, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x07, 0xe0, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf8, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x80,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xe0,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// Imagen para mostrar alarma modo "Armada ausente"
const unsigned char AlarmaAusente[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xf0,
  0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0xff, 0xe3, 0xff, 0x80, 0x00,
  0x00, 0x03, 0xff, 0x80, 0xff, 0xe0, 0x00, 0x00, 0x0f, 0xfe, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x7f,
  0xf0, 0x00, 0x07, 0xff, 0x00, 0x00, 0x7f, 0xc0, 0x00, 0x01, 0xff, 0x00, 0x00, 0x7f, 0x00, 0x00,
  0x00, 0x7f, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x0f,
  0x00, 0x00, 0x78, 0x00, 0x08, 0x00, 0x0f, 0x00, 0x00, 0x78, 0x00, 0x1c, 0x00, 0x0f, 0x00, 0x00,
  0x78, 0x00, 0x3e, 0x00, 0x0f, 0x00, 0x00, 0x78, 0x00, 0x7f, 0x80, 0x0f, 0x00, 0x00, 0x78, 0x01,
  0xff, 0xc0, 0x0f, 0x00, 0x00, 0x78, 0x03, 0xff, 0xe0, 0x0f, 0x00, 0x00, 0x78, 0x07, 0xff, 0xf0,
  0x0f, 0x00, 0x00, 0x78, 0x0f, 0xff, 0xf8, 0x0f, 0x00, 0x00, 0x78, 0x1f, 0xff, 0xfe, 0x0f, 0x00,
  0x00, 0x78, 0x7f, 0xff, 0xff, 0x0f, 0x00, 0x00, 0x78, 0xff, 0xff, 0xff, 0x8f, 0x00, 0x00, 0x7c,
  0x0f, 0xff, 0xf8, 0x0f, 0x00, 0x00, 0x7c, 0x0f, 0xff, 0xf8, 0x1f, 0x00, 0x00, 0x7c, 0x0f, 0xff,
  0xf8, 0x1f, 0x00, 0x00, 0x3c, 0x0f, 0xff, 0xf8, 0x1f, 0x00, 0x00, 0x3c, 0x0f, 0xe1, 0xf8, 0x1e,
  0x00, 0x00, 0x3e, 0x0f, 0xc1, 0xf8, 0x3e, 0x00, 0x00, 0x3e, 0x0f, 0xc1, 0xf8, 0x3e, 0x00, 0x00,
  0x1f, 0x0f, 0xc1, 0xf8, 0x3c, 0x00, 0x00, 0x1f, 0x0f, 0xc1, 0xf8, 0x7c, 0x00, 0x00, 0x0f, 0x8f,
  0xc1, 0xf8, 0x7c, 0x00, 0x00, 0x0f, 0x8f, 0xc1, 0xf8, 0xf8, 0x00, 0x00, 0x07, 0xc0, 0x00, 0x01,
  0xf0, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x01, 0xf0, 0x00, 0x00, 0x03, 0xe0, 0x00, 0x03, 0xe0, 0x00,
  0x00, 0x01, 0xf0, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x01, 0xf8, 0x00, 0x0f, 0xc0, 0x00, 0x00, 0x00,
  0xfe, 0x00, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xc1,
  0xfe, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xf0, 0x00,
  0x00, 0x00, 0x00, 0x03, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x80, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// Imagen para mostrar alarma modo "Armada en casa"
const unsigned char AlarmaCasa[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xfe,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xe0, 0x00,
  0x00, 0x00, 0x07, 0xfe, 0x1f, 0xf8, 0x00, 0x00, 0x00, 0x1f, 0xf8, 0x07, 0xfe, 0x00, 0x00, 0x00,
  0xff, 0xe0, 0x01, 0xff, 0xc0, 0x00, 0x01, 0xff, 0x80, 0x00, 0x7f, 0xe0, 0x00, 0x03, 0xfc, 0x00,
  0x00, 0x0f, 0xf0, 0x00, 0x03, 0xf0, 0x00, 0x00, 0x03, 0xf0, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00,
  0xf0, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x03, 0xc0, 0x03, 0x80, 0x00, 0xf0, 0x00,
  0x03, 0xc0, 0x0f, 0x80, 0x00, 0xf0, 0x00, 0x03, 0xc0, 0x1f, 0x80, 0x00, 0xf0, 0x00, 0x03, 0xc0,
  0x3f, 0x80, 0x00, 0xf0, 0x00, 0x03, 0xc0, 0x3f, 0x80, 0x00, 0xf0, 0x00, 0x03, 0xc0, 0x7f, 0x80,
  0x00, 0xf0, 0x00, 0x03, 0xc0, 0x7f, 0x80, 0x00, 0xf0, 0x00, 0x03, 0xc0, 0x7f, 0xc0, 0x00, 0xf0,
  0x00, 0x03, 0xc0, 0x7f, 0xc0, 0x00, 0xf0, 0x00, 0x03, 0xe0, 0x7f, 0xc0, 0x01, 0xf0, 0x00, 0x03,
  0xe0, 0x7f, 0xe0, 0x01, 0xf0, 0x00, 0x01, 0xe0, 0x7f, 0xf0, 0x01, 0xe0, 0x00, 0x01, 0xe0, 0x7f,
  0xfc, 0x01, 0xe0, 0x00, 0x01, 0xe0, 0x3f, 0xff, 0x81, 0xe0, 0x00, 0x01, 0xe0, 0x1f, 0xff, 0x81,
  0xe0, 0x00, 0x01, 0xf0, 0x0f, 0xff, 0x83, 0xe0, 0x00, 0x00, 0xf0, 0x07, 0xff, 0x03, 0xc0, 0x00,
  0x00, 0xf8, 0x01, 0xfc, 0x07, 0xc0, 0x00, 0x00, 0x78, 0x00, 0x00, 0x07, 0x80, 0x00, 0x00, 0x7c,
  0x00, 0x00, 0x0f, 0x80, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00,
  0x1f, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x1f, 0x80, 0x00, 0x7e, 0x00,
  0x00, 0x00, 0x0f, 0xc0, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x07, 0xe0, 0x01, 0xf8, 0x00, 0x00, 0x00,
  0x03, 0xf0, 0x03, 0xf0, 0x00, 0x00, 0x00, 0x01, 0xfc, 0x0f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0xff,
  0x3f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xfe, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x07, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe0, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// Imagen para mostrar alarma desconectada
const unsigned char AlarmaOff[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xf0,
  0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0xff, 0xe3, 0xff, 0x80, 0x00,
  0x00, 0x03, 0xff, 0x80, 0xff, 0xe0, 0x00, 0x00, 0x0f, 0xfe, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x7f,
  0xf0, 0x00, 0x07, 0xff, 0x00, 0x00, 0x7f, 0xc0, 0x00, 0x01, 0xff, 0x00, 0x00, 0x7f, 0x00, 0x00,
  0x00, 0x7f, 0x00, 0x00, 0x7c, 0x00, 0x3e, 0x00, 0x1f, 0x00, 0x00, 0x78, 0x00, 0x7f, 0x80, 0x0f,
  0x00, 0x00, 0x78, 0x00, 0xff, 0xc0, 0x0f, 0x00, 0x00, 0x78, 0x01, 0xc1, 0xc0, 0x0f, 0x00, 0x00,
  0x78, 0x01, 0xc0, 0xe0, 0x0f, 0x00, 0x00, 0x78, 0x01, 0x80, 0xe0, 0x0f, 0x00, 0x00, 0x78, 0x01,
  0x80, 0x00, 0x0f, 0x00, 0x00, 0x78, 0x01, 0x80, 0x00, 0x0f, 0x00, 0x00, 0x78, 0x01, 0x80, 0x00,
  0x0f, 0x00, 0x00, 0x78, 0x01, 0x80, 0x00, 0x0f, 0x00, 0x00, 0x78, 0x01, 0x80, 0x00, 0x0f, 0x00,
  0x00, 0x78, 0x07, 0xff, 0xf0, 0x0f, 0x00, 0x00, 0x78, 0x0f, 0xff, 0xf8, 0x0f, 0x00, 0x00, 0x7c,
  0x0f, 0xff, 0xf8, 0x0f, 0x00, 0x00, 0x7c, 0x0f, 0xff, 0xf8, 0x1f, 0x00, 0x00, 0x7c, 0x0f, 0xff,
  0xf8, 0x1f, 0x00, 0x00, 0x3c, 0x0f, 0xff, 0xf8, 0x1f, 0x00, 0x00, 0x3c, 0x0f, 0xff, 0xf8, 0x1e,
  0x00, 0x00, 0x3e, 0x0f, 0xff, 0xf8, 0x3e, 0x00, 0x00, 0x3e, 0x0f, 0xff, 0xf8, 0x3e, 0x00, 0x00,
  0x1e, 0x0f, 0xff, 0xf8, 0x3c, 0x00, 0x00, 0x1f, 0x0f, 0xff, 0xf8, 0x7c, 0x00, 0x00, 0x0f, 0x8f,
  0xff, 0xf8, 0x7c, 0x00, 0x00, 0x0f, 0x87, 0xff, 0xf0, 0xf8, 0x00, 0x00, 0x07, 0xc0, 0x00, 0x01,
  0xf0, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x01, 0xf0, 0x00, 0x00, 0x03, 0xe0, 0x00, 0x03, 0xe0, 0x00,
  0x00, 0x01, 0xf0, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x01, 0xf8, 0x00, 0x0f, 0xc0, 0x00, 0x00, 0x00,
  0xfe, 0x00, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xc1,
  0xfe, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xf0, 0x00,
  0x00, 0x00, 0x00, 0x01, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x80, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// Imagen para combinar con alarma modo "Armada ausente" para crear la animación
const unsigned char AlarmaArmando[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

};
// Usamos un "array" para llamar a la imagen que necesitemos para la animación de la puerta
const unsigned char* imagenes[5] = {
  Puerta1,  // Lo llamaremos con "imagenes[0]"
  Puerta2,  // Lo llamaremos con "imagenes[1]"
  Puerta3,  // Lo llamaremos con "imagenes[2]"
  Puerta4,  // Lo llamaremos con "imagenes[3]"
  Puerta5   // Lo llamaremos con "imagenes[4]"
};
// Usamos un "array" para llamar a la imagen que necesitemos para la animación armando alarma
const unsigned char* imagenes_A[2] = {
  AlarmaAusente,  // Lo llamaremos con "imagenes_A[0]"
  AlarmaArmando   // Lo llamaremos con "imagenes_A[1]"
};
void setup() {
  Serial.begin(9600);                                // Iniciamos el Serial
  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {  // Si no es correcta la configuración de la pantalla nos muestra un error
    Serial.println(F("SSD1306 allocation failed"));
    for (;;)
      ;
  }

  display.clearDisplay();                      // Limpiamos el buffer de la pantalla
  display.drawBitmap(0, 0, logo, 128, 64, 1);  // Dibujamos el logo en la pantalla
  display.display();                           // Hacemos que se muestre en la pantalla
  delay(3000);                                 // Durante 3 segundos
  display.clearDisplay();                      // Después la limpiamos

  pinMode(botonCerrar, INPUT_PULLUP);  // Definimos los pulsadores como Pull_Up, no necesitamos resistencias externas
  pinMode(botonAbrir, INPUT_PULLUP);
  pinMode(botonAlarma, INPUT_PULLUP);
  pinMode(botonAlarma2, INPUT_PULLUP);

  // Iniciamos el Wifi
  setup_wifi();
  client.setServer(mqtt_server, 1883);
  client.setCallback(callback);

  // Iniciamos OTA
  ArduinoOTA.setHostname(CLIENT_ID);
  ArduinoOTA.onStart([]() {
    Serial.println("Start");
  });
  ArduinoOTA.onEnd([]() {
    Serial.println("\nEnd");
  });
  ArduinoOTA.onProgress([](unsigned int progress, unsigned int total) {
    Serial.printf("Progress: %u%%\r", (progress / (total / 100)));
  });
  ArduinoOTA.onError([](ota_error_t error) {
    Serial.printf("Error[%u]: ", error);
    if (error == OTA_AUTH_ERROR) Serial.println("Auth Failed");
    else if (error == OTA_BEGIN_ERROR) Serial.println("Begin Failed");
    else if (error == OTA_CONNECT_ERROR) Serial.println("Connect Failed");
    else if (error == OTA_RECEIVE_ERROR) Serial.println("Receive Failed");
    else if (error == OTA_END_ERROR) Serial.println("End Failed");
  });
  ArduinoOTA.begin();

  Serial.println("Configuración cargada");
}

void loop() {

  ArduinoOTA.handle();

  // PULSADOR ABRIR //

  valAbrir = digitalRead(botonAbrir);  // Leemos el valor del pulsador

  if ((valAbrir == LOW) && (old_valAbrir == 1)) {          // Si el valor a cambiado, de OFF a ON
    tiempoBotonAbrirOn = millis();                         // Empezamos a contar el tiempo
    flancoBotonAbrirOn = true;                             // Ponemos el flanco en verdadero
  } else if ((valAbrir == HIGH) && (old_valAbrir == 0)) {  // Si el valor a cambiado, de ON a OFF
    tiempoBotonAbrirOff = millis();                        // Empezamos a contar el tiempo
    flancoBotonAbrirOff = true;                            // Ponemos el flanco en verdadero
  }

  old_valAbrir = valAbrir;  // Igualamos de nuevo los valores

  if (flancoBotonAbrirOn && (valAbrir == LOW))           // Si el pulsador de abrir continua pulsado
    if (millis() - tiempoBotonAbrirOn >= tiempomax) {    // Y ha pasado el tiempo configurado para evitar el "efecto rebote"
      client.publish(Topic_Mando, "Abrir On", true);     // Enviamos el mensaje "Abrir On" al sensor de mando de Home Assistant
      client.publish(Topic_Puerta "/comando", "1");      // Enviamos la orden de abrir la puerta al topic de Home Assistant
      client.publish("alarmo/command", "disarm", true);  // Descativamos la alarma
      flancoBotonAbrirOn = false;                        // Ponemos el flanco en "falso" para que se envíe solo una vez con cada pulsación
    }

  if (flancoBotonAbrirOff && (valAbrir == HIGH))        // Si el pulsador no se pulsa
    if (millis() - tiempoBotonAbrirOff >= tiempomax) {  // Y ha pasado el tiempo configurado para evitar el "efecto rebote"
      client.publish(Topic_Mando, "Off", true);         // Enviamos el mensaje "Off" al sensor de mando de Home Assistant
      flancoBotonAbrirOff = false;                      // Ponemos el flanco en "falso" para que no se envien mensajes constantemente si no se pulsa
    }

  // PULSADOR CERRAR //

  valCerrar = digitalRead(botonCerrar);

  if ((valCerrar == LOW) && (old_valCerrar == 1)) {
    tiempoBotonCerrarOn = millis();
    flancoBotonCerrarOn = true;
  } else if ((valCerrar == HIGH) && (old_valCerrar == 0)) {
    tiempoBotonCerrarOff = millis();
    flancoBotonCerrarOff = true;
  }

  old_valCerrar = valCerrar;

  if (flancoBotonCerrarOn && (valCerrar == LOW))
    if (millis() - tiempoBotonCerrarOn >= tiempomax) {
      client.publish(Topic_Puerta "/comando", "2");
      Serial.println("Cerrar ON");
      flancoBotonCerrarOn = false;
    }

  if (flancoBotonCerrarOff && (valCerrar == HIGH))
    if (millis() - tiempoBotonCerrarOff >= tiempomax) {
      client.publish(Topic_Mando, "Off", true);
      flancoBotonCerrarOff = false;
    }

  // PULSADOR ALARMA TOTAL

  valAlarma = digitalRead(botonAlarma);

  if ((valAlarma == LOW) && (old_valAlarma == 1)) {
    tiempoBotonAlarmaOn = millis();
    flancoBotonAlarmaOn = true;
  } else if ((valAlarma == HIGH) && (old_valAlarma == 0)) {
    tiempoBotonAlarmaOff = millis();
    flancoBotonAlarmaOff = true;
  }

  old_valAlarma = valAlarma;

  if (flancoBotonAlarmaOn && (valAlarma == LOW))
    if (millis() - tiempoBotonAlarmaOn >= tiempomax) {
      client.publish(Topic_Alarma "/command", "arm_away", true);
      Serial.println("Alarma ON");
      flancoBotonAlarmaOn = false;
    }

  if (flancoBotonAlarmaOff && (valAlarma == HIGH))
    if (millis() - tiempoBotonAlarmaOff >= tiempomax) {
      Serial.println("Alarma Off");
      flancoBotonAlarmaOff = false;
    }

  // PULSADOR ALARMA PARCIAL

  valAlarma2 = digitalRead(botonAlarma2);

  if ((valAlarma2 == LOW) && (old_valAlarma2 == 1)) {
    tiempoBotonAlarma2On = millis();
    flancoBotonAlarma2On = true;
  } else if ((valAlarma2 == HIGH) && (old_valAlarma2 == 0)) {
    tiempoBotonAlarma2Off = millis();
    flancoBotonAlarma2Off = true;
  }

  old_valAlarma2 = valAlarma2;

  if (flancoBotonAlarma2On && (valAlarma2 == LOW))
    if (millis() - tiempoBotonAlarma2On >= tiempomax) {
      client.publish(Topic_Alarma "/command", "arm_home", true);
      Serial.println("Alarma ON");
      flancoBotonAlarma2On = false;
    }

  if (flancoBotonAlarma2Off && (valAlarma2 == HIGH))
    if (millis() - tiempoBotonAlarma2Off >= tiempomax) {
      Serial.println("Alarma Off");
      flancoBotonAlarma2Off = false;
    }

  if (estado_subiendo == 1) {        // Si hemos recibido el mensaje de puerta subiendo
    subiendo();                      // Llamamos a la instrucción "subiendo"
  } else if (estado_bajando == 1) {  // Si hemos recibido el mensaje de puerta bajando
    bajando();                       // Llamamos a la instrucción "bajando"
  }

  if (estado_armando == 1) {  // Si hemos recibido el mensaje de "alarma Armada ausente"
    armando();                // Llamamos a la instrucción "armando"
  }

  if (WiFi.status() != WL_CONNECTED) {        // Si no estamos conectados a Wifi y "flancowifi" está activado:
    setup_wifi();                             // Llamamos a la funcion "setup_wifi"
    reconnect();                              // Llamamos a la funcion "reconnect"
    client.setServer(mqtt_server, mqttport);  // Iniciamos "setServer" con los datos porpocionados
    client.setCallback(callback);             // Iniciamos "Callback" para recibir mensajes de MQTT
  }
  if (!client.connected()) {  // Si seguimos sin estar conectados:
    reconnect();              // Llamamos a la funcion "reconnect"
  }
  client.loop();  // Esta función revisa en cada ciclo si hay que enviar o leer mensaje por MQTT
}

void subiendo() {

  if (millis() - tiempoImagenes >= tiempomaxImagenes) {  // Si ha pasado el tiempo configurado para el intervalo de imagenes
    s++;                                                 // Cada vez que ocurre, camniamos el valor de "s" sumando +1
    tiempoImagenes = millis();                           // Reinicamos el contador para que solo sume cada vez que ha pasado el tiempo estipulado
  }                                                      //
  if (s == 5) {                                          // Cuando el valor de "s" es igual a "5"
    s = 0;                                               // Debemos ponerlo de nuevo en 0
  }

  display.fillRect(0, 0, 82, 64, 0);                 // Dibujamos un cuadrado negro para borrar la imagen anterior, si usasemos la opcion de "clearDisplay" nos borraría toda la pantalla
  display.drawBitmap(0, 0, imagenes[s], 75, 64, 1);  // Mostramos la imagen llamándola desde el "array" anteriormente configurado,donde la variable de "s" va a ir cambiando entre "0" y "1"
  display.display();                                 // Mostramos la imagen en pantalla
  delay(10);                                         // Le damos un pequeño delay
}

void bajando() {

  if (millis() - tiempoImagenes >= tiempomaxImagenes) {  // Si ha pasado el tiempo configurado para el intervalo de imagenes
    b--;                                                 // Cada vez que ocurre, camniamos el valor de "b" restando -1
    tiempoImagenes = millis();                           // Reinicamos el contador para que solo sume cada vez que ha pasado el tiempo estipulado
  }                                                      //
  if (b == -1) {                                         // Cuando el valor de "b" es igual a "-1"
    b = 4;                                               // Debemos ponerlo de nuevo en 4
  }

  display.fillRect(0, 0, 82, 64, 0);                 // Dibujamos un cuadrado negro para borrar la imagen anterior, si usasemos la opcion de "clearDisplay" nos borraría toda la pantalla
  display.drawBitmap(0, 0, imagenes[b], 75, 64, 1);  // Mostramos la imagen llamándola desde el "array" anteriormente configurado,donde la variable de "b" va a ir cambiando entre "0" y "4"
  display.display();                                 // Mostramos la imagen en pantalla
  delay(10);                                         // Le damos un pequeño delay
}

void armando() {

  if (millis() - tiempoImagenes_armando >= tiempomaxImagenes) {  // Si ha pasado el tiempo configurado para el intervalo de imagenes
    a++;                                                         // Cada vez que ocurre, camniamos el valor de "a" sumando +1
    tiempoImagenes_armando = millis();                           // Reinicamos el contador para que solo sume cada vez que ha pasado el tiempo estipulado
  }                                                              //
  if (a == 2) {                                                  // Cuando el valor de "a" es igual a "2"
    a = 0;                                                       // Debemos ponerlo de nuevo en 0
  }

  display.fillRect(82, 9, 64, 64, 0);                   // Dibujamos un cuadrado negro para borrar la imagen anterior, si usasemos la opcion de "clearDisplay" nos borraría toda la pantalla
  display.drawBitmap(82, 9, imagenes_A[a], 50, 50, 1);  // Mostramos la imagen llamándola desde el "array" anteriormente configurado,donde la variable de "a" va a ir cambiando entre "0" y "1"
  display.display();                                    // Mostramos la imagen en pantalla
  delay(10);                                            // Le damos un pequeño delay
}

void setup_wifi() {  // Configuración para conectar a Wifi
  delay(10);
  Serial.println();
  Serial.print("Conectado a: ");  //  Mostramos por serial el Wifi que nos queremos conectar
  Serial.println(ssid);           // Muestra el "SSID" que configuramos
  WiFi.mode(WIFI_STA);            // Configuración de tipo de conexión
  WiFi.begin(ssid, password);     // Configuración de nombre de "SSID" y su password

  while (WiFi.status() != WL_CONNECTED) {           // Si no estamos conectados a Wifi
    display.clearDisplay();                         // Limpiamos el buffer de la pantalla
    display.drawBitmap(30, 0, WifiOff, 64, 64, 1);  // Dibujamos la imagen de desconexión de Wifi
    display.display();                              // lo mostramos en pantalla
    for (int i = 0; i <= 50; i++) {                 // Iniciamos una cuenta para la espera de la conexión
      delay(10);
      if (i == 50) {
        Serial.println(".");
      } else {
        Serial.print(".");
      }
    }
  }
  Serial.println("");
  Serial.println("Conectado a WIFI");  // Mostramos por serial que hemos conectado a Wifi
  Serial.println("Dirección IP: ");    // Mostramos la IP asignada
  Serial.println(WiFi.localIP());
}

void callback(char* topic, byte* payload, unsigned int length) {  // Función para poder recibir los mensajes por MQTT
  Serial.print("Mensaje recibido [");                             // Mostramos por serial cuando recibimos un mensaje
  Serial.print(topic);                                            // Mostramos el topic que recibimos
  Serial.print("] ");                                             //
  for (int i = 0; i < length; i++) {                              //
    Serial.print((char)payload[i]);                               // Muestra el mensaje
  }
  Serial.println();

  ///// LEE EL ESTADO DE LA ALARMA/////

  payload[length] = '\0';
  String message = (char*)payload;  // Convertimos el mensaje recibido en un "String" en "message"

  if (strcmp(topic, Topic_Alarma "/state") == 0) {      // Si recibimos un mensaje del topic del estado de la alarma
    if (message == "disarmed") {                        // Si el mensaje es "disarmed" (desarmada)
      estado_armando = 0;                               // Ponemos el estado de "armando" en 0
      display.fillRect(82, 9, 64, 64, 0);               // Borramos la imagen anterior dibujando un cuadrado negro
      display.drawBitmap(82, 9, AlarmaOff, 50, 50, 1);  // Mostramos la imagen de alarma desconectada
      display.display();                                // Lo mostramos en pantalla

    } else if (message == "armed_home") {                // Si el mensaje es "armed_home" (modo Armada en casa)
      estado_armando = 0;                                // Ponemos el estado de "armando" en 0
      display.fillRect(82, 9, 64, 64, 0);                // Borramos la imagen anterior dibujando un cuadrado negro
      display.drawBitmap(82, 9, AlarmaCasa, 50, 50, 1);  // Mostramos la imagen de alarma modo Armada en casa
      display.display();                                 // Lo mostramos en pantalla

    } else if (message == "armed_away") {                   // Si el mensaje es "armed_away" (modo Armada ausente)
      estado_armando = 0;                                   // Ponemos el estado de "armando" en 0
      display.fillRect(82, 9, 64, 64, 0);                   // Borramos la imagen anterior dibujando un cuadrado negro
      display.drawBitmap(82, 9, AlarmaAusente, 50, 50, 1);  // Mostramos la imagen de alarma modo Armada ausente
      display.display();                                    // Lo mostramos en pantalla

    } else if (message == "arming") {     // Si el mensaje es "arming" (armando)
      estado_armando = 1;                 // Ponemos el estado de "armando" en 1 para iniciar la animación de "armando"
      tiempoImagenes_armando = millis();  // Registramos el tiempo actual en "tiempoImagenes_armando"
    }
  }

  ///// LEE EL ESTADO DE LA PUERTA DEL GARAJE ////

  if (strcmp(topic, Topic_Puerta "/estado") == 0) {  // Si recibimos un mensaje del topic del estado de la puerta
    if ((char)payload[0] == '1') {                   // Si el mensaje es "1" (Puerta cerrada)
      delay(10);                                     //
      ;                                              //
      display.fillRect(0, 0, 82, 64, 0);             // Borramos la imagen anterior dibujando un cuadrado negro
      display.drawBitmap(0, 0, Puerta5, 75, 64, 1);  // Mostramos la imagen de puerta cerrada
      display.display();                             // Lo mostramos en pantalla
      estado_bajando = 0;                            // Ponemos el estado de "bajando" en 0
      estado_subiendo = 0;                           // Ponemos el estado de "subiendo" en 0
    }

    else if ((char)payload[0] == '2') {  // Si el mensaje es "2" (Puerta abriendo)
      delay(10);
      ;
      estado_bajando = 0;         // Ponemos estado "bajando" en "0"
      estado_subiendo = 1;        // Ponemos estado "subiendo" en "1"
      tiempoImagenes = millis();  // Registramos el tiempo actual en "tiempoImagenes"

    } else if ((char)payload[0] == '3') {  // Si el mensaje es "3" (Puerta abierta)
      delay(10);
      ;
      display.fillRect(0, 0, 82, 64, 0);             // Borramos la imagen anterior dibujando un cuadrado negro
      display.drawBitmap(0, 0, Puerta1, 75, 64, 1);  // Mostramos la imagen de puerta abierta
      display.display();                             // Lo mostramos en pantalla
      estado_bajando = 0;                            // Ponemos el estado de "bajando" en 0
      estado_subiendo = 0;                           // Ponemos el estado de "subiendo" en 0
    }

    else if ((char)payload[0] == '4') {  // Si el mensaje es "4" (Puerta cerrando)
      delay(10);
      ;
      estado_bajando = 1;         // Ponemos estado "bajando" en "1"
      estado_subiendo = 0;        // Ponemos estado "subiendo" en "0"
      tiempoImagenes = millis();  // Registramos el tiempo actual en "tiempoImagenes"
    }
  }

  else {
    delay(10);
    ;
  }
}
void reconnect() {

  while (!client.connected()) {              // Si no estamos conectados a MQTT
    Serial.print("Conectando con MQTT...");  // Mostramos por serial que estamos intentando conectar
    display.clearDisplay();
    display.drawBitmap(30, 0, WifiOff, 64, 64, 1);  // Mientras no está conectado mostramos la imagen de no conexión
    display.display();                              // Lo mostramos en pantalla

    if (client.connect(CLIENT_ID, mqttusuario, mqttpass)) {  // Si conectamos a Wifi, establecemos la configuración para conectarnos
      client.subscribe(Topic_Puerta "/estado");              // Nos suscribimos al topic para recibir el estado de la puerta
      client.subscribe(Topic_Alarma "/state");               // Nos suscribimos al topic para recibir el estado de la alarma
    } else {                                                 // Si no hemos podido conectar:
      Serial.print("failed, rc=");                           // Mostramos por serial un mensaje del fallo
      Serial.print(client.state());
      Serial.println(" nuevo intento en 5 segundos...");

      for (int i = 0; i <= 500; i++) {  // Creamos un "for" para crear una espera mientras intenta la conexión
        delay(10);
        if (i == 50) {
          Serial.println(".");
        } else {
          Serial.print(".");
        }
      }
    }
  }
}